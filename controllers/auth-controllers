const User = require("../model/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const registerUser = async(req, res)=>{
    try{
        const {username , email , password, role} = req.body;

        const checkExistingUser = await User.findOne({$or:[{username},{email}]});
        if(checkExistingUser){
            return res.status(400).json({
                success : false , 
                message : "User already exists"
            })
        };
    // hash user password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password,salt);

    //create new user 
    const newlyCreatedUser = new User({
        username , 
        email,
        password : hashedPassword,
        role: role || "user"

    })
    await newlyCreatedUser.save();
    if(newlyCreatedUser){
        res.status(201).json({
            success : true , 
            message : "user created successfully"
            });
        } else {
            res.status(400).json({
                success : false ,
                message : "Unable to register the user"
            });
        }
    }catch(err){
        console.log(err);
        res.status(500).json({
            success : false ,
            message1 :  " problem",
            message : "Something went wrong "
        });
    }
};
const loginUser = async(req, res)=>{
    try{
        //check the username exist or not
        const {username , password} = req.body;
        const user = await User.findOne({username});
        if(!user){
            return res.status(400).json({
                success : false , 
                message : "Invalid username or password"

            })
        }
        //if the password is correct or not 
        const isPasswordMatch = await bcrypt.compare(password ,user.password);
        if(!isPasswordMatch){
            return res.status(400).json({
                success : false , 
                message : "Invalid username or password"

            })
        }
        //create user token
        const accessToken = jwt.sign({userId :user._id,
            username: user.username,
            role : user.role
         }, process.env.JWT_SECRET_KEY,{
            expiresIn : '15m'
         });
         res.status(200).json({
            success : true,
            message : "Logged in successful", 
            accessToken
         });


    }catch(err){
        console.log(err);
        res.status(500).json({
            success : false ,
            message : "Something went wrong , please try later "
        });
    }
};

const changePassword = async (req, res) => {
    try {
        const userId = req.userInfo.userId;
        const { oldPassword, newPassword } = req.body;

        // Validate input
        if (!oldPassword || !newPassword) {
            return res.status(400).json({
                success: false,
                message: "Old password and new password are required."
            });
        }

        // Find the user by ID
        const user = await User.findById(userId);
        if (!user) {
            return res.status(400).json({
                success: false,
                message: "User not found."
            });
        }

        // Check if the old password is correct
        const isPasswordMatch = await bcrypt.compare(oldPassword, user.password);
        if (!isPasswordMatch) {
            return res.status(400).json({
                success: false,
                message: "Old password is incorrect. Please try again."
            });
        }

        // Hash the new password (simplified way)
        const newHashedPassword = await bcrypt.hash(newPassword, 10);

        // Update the user's password
        user.password = newHashedPassword;
        await user.save();

        res.status(200).json({
            success: true,
            message: "Password has been changed successfully."
        });
    } catch (err) {
        console.error("Error during password change:", err); // <-- full error logging
        res.status(500).json({
            success: false,
            message: "Something went wrong. Please try again later."
        });
    }
};


module.exports = {registerUser , loginUser, changePassword};
